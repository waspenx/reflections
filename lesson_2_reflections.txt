Q: What happens when you initialize a repository? Why do you need to do it?
A: When I initialize a repository, a hidder folder '.git' is created. I need to initialize the repository to start keeping tracking the commits.
Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: The staging area is not in the repository yet. It includes files in the working directory. It includes files that have not been commited yet. It allows commiting multiple files in one single commit. It also separates files that need to be commited and those are not.
Q: How can you use the staging area to make sure you have one commit per logical change?
A: Use command git diff and git diff --staged to compare between the working directory and the staging area, and staging area and the last commit to check for logical changes.
Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: If the changes are experimental (or errors prone) or an alternate version with no logical differences, branches will allow development along each branch without affecting the others.
Q: How do the diagrams help you visualize the branch structure?
A: History diagrams clearly show the visiblitiy of each commit/branch and their logical relationship.
Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: The files will be merged into a new commit. The older commits from both branches will be combined (accessable) and listed according to timestamps.
Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: Automatic merging is convenient, but sometimes not feasible, because if different changes are made against the same code, i.e., conflict, automatic merging is not able to resolve it and deciede which change to keep. Manual merging requires more work, but gives opportunity to let the owner to examine the conflicts and resolve them. 
